@page "/tasks/add"
@page "/tasks/{ID:int}"
@inject IDataService data
@inject NavigationManager navigate


@if (TaskItem != null)
{
    <EditForm Model="TaskItem" FormName="TaskForm" OnValidSubmit="ValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <h2>Новая задача</h2>
        <InputNumber @bind-Value="TaskItem.ID" hidden/>
        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Заголовок</label>
            <InputText @bind-Value="TaskItem.Title" Class="form-control"/>
            <ValidationMessage For="() => TaskItem.Title"/>
        </div> |
        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Описание</label>
            <InputTextArea @bind-Value="TaskItem.Description" Class="form-control" />
            <ValidationMessage For="() => TaskItem.Description" />
        </div>
        <div class="form-group d-flex justify-content-between m-2">
            <label class="col-form-label col-3">Дата окончания</label>
            <InputDate @bind-Value="TaskItem.FInishdDate" Class="form-control" />
            <ValidationMessage For="() => TaskItem.FInishdDate"/>
        </div>
        <div class="btn-group">
            <button class="btn btn-primary m-2" type="submit">Cохранить</button>
            <a class="btn btn-primary m-2" href="/">Отмена</a>
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public int ID { get; set; }

    [SupplyParameterFromForm]
    TaskItem? TaskItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if(TaskItem == null)
        {
            TaskItem = new();
            if(ID != 0)
            {
                var scr = await data.GetTaskAsync(ID);
                TaskItem.ID = scr.ID;
                TaskItem.Title = scr.Title;
                TaskItem.Description = scr.Description;
                TaskItem.FInishdDate = scr.FInishdDate;
            }
        }
    }

    async Task ValidSubmit()
    {
        await data.SaveAsync(TaskItem!);
        navigate.NavigateTo("/");
    }
}
